var searchIndex = JSON.parse('{\
"poseidon252":{"doc":"Build…","i":[[3,"PoseidonAnnotation","poseidon252","Wrapping struct that defines used to implement over it the…",null,null],[12,"0","","",0,null],[3,"StorageScalar","","This struct is a Wrapper type over the bls12-381 `Scalar`…",null,null],[12,"0","","",1,null],[3,"PoseidonBranch","","The `Poseidon` structure will accept a number of inputs…",null,null],[12,"root","","Root of the Merkle Tree",2,null],[12,"levels","","Levels of the MerkleTree with it\'s corresponding leaves…",2,null],[3,"PoseidonLevel","","Represents a Merkle-Tree Level inside of a…",null,null],[12,"offset","","Position on the level where the hash of the previous…",3,null],[12,"leaves","","Leaves of the Level.",3,null],[0,"merkle_lvl_hash","","Reference implementation for the Poseidon Merkle hash…",null,null],[0,"merkle_proof","","Reference implementation for the gadget that builds a…",null,null],[3,"PoseidonBranch","poseidon252::merkle_proof","The `Poseidon` structure will accept a number of inputs…",null,null],[12,"root","","Root of the Merkle Tree",2,null],[12,"levels","","Levels of the MerkleTree with it\'s corresponding leaves…",2,null],[3,"PoseidonLevel","","Represents a Merkle-Tree Level inside of a…",null,null],[12,"offset","","Position on the level where the hash of the previous…",3,null],[12,"leaves","","Leaves of the Level.",3,null],[5,"merkle_opening_gadget","","Provided a `kelvin::Branch`, a `&mut StandardComposer`, a…",null,[[["branch",3],["scalar",3],["narrowhamt",3],["standardcomposer",3],["variable",3]]]],[5,"merkle_opening_scalar_verification","","Provided a `PoseidonBranch` and a Merkle Tree root, verify…",null,[[["scalar",3],["branch",3],["narrowhamt",3]]]],[11,"with_capacity","poseidon252","Generates a default PoseidonBranch with the specified…",2,[[]]],[0,"sponge","","Reference implementation for the Poseidon Sponge hash…",null,null],[0,"sponge","poseidon252::sponge","The `pad` module implements the Sponge\'s padding algorithm",null,null],[5,"sponge_hash","poseidon252::sponge::sponge","The `hash` function takes an arbitrary number of Scalars…",null,[[],["scalar",3]]],[5,"sponge_hash_gadget","","The `hash` function takes an arbitrary number of plonk…",null,[[["standardcomposer",3]],["variable",3]]],[17,"ARITY","poseidon252","Maximum arity supported for trees.",null,null],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"combine","","",0,[[],["option",4]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"vzip","","",1,[[]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"vzip","","",2,[[]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"vzip","","",3,[[]]],[11,"from","","",0,[[["kv",3]]]],[11,"from","","",0,[[["scalar",3]]]],[11,"from","","",0,[[["storagescalar",3]]]],[11,"from","","",2,[[["branch",3]],["poseidonbranch",3]]],[11,"into","","",1,[[],["scalar",3]]],[11,"clone","","",0,[[],["poseidonannotation",3]]],[11,"clone","","",1,[[],["storagescalar",3]]],[11,"clone","","",2,[[],["poseidonbranch",3]]],[11,"clone","","",3,[[],["poseidonlevel",3]]],[11,"default","","",1,[[]]],[11,"default","","",3,[[]]],[11,"eq","","",2,[[["poseidonbranch",3]]]],[11,"ne","","",2,[[["poseidonbranch",3]]]],[11,"eq","","",3,[[["poseidonlevel",3]]]],[11,"ne","","",3,[[["poseidonlevel",3]]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"borrow","","",0,[[],["storagescalar",3]]],[11,"borrow","","",1,[[],["scalar",3]]],[11,"persist","","",0,[[["sink",4]],["result",6]]],[11,"restore","","",0,[[["source",3]],["result",6]]],[11,"persist","","",1,[[["sink",4]],["result",6]]],[11,"restore","","",1,[[["source",3]],["result",6]]],[11,"combine","","This implements the logic that Kelvin needs in order to…",0,[[],["option",4]]]],"p":[[3,"PoseidonAnnotation"],[3,"StorageScalar"],[3,"PoseidonBranch"],[3,"PoseidonLevel"]]}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);